// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(uuid())
  email             String            @unique
  name              String
  encryptedPassword String
  orders            Order[]
  favoriteProducts  FavoriteProduct[]
}

model Product {
  id               Int               @id @default(autoincrement())
  name             String
  price            Int
  category         ProductCategory
  orderItems       OrderItem[]
  favoriteProducts FavoriteProduct[]
}

enum ProductCategory {
  shoes
  food
  accessory
  clothes
  electronics
}

model Order {
  id             String      @id @default(uuid())
  status         OrderStatus @default(pending)
  user           User        @relation(fields: [userId], references: [id], onDelete: Restrict)
  userId         String
  orderItems     OrderItem[]
  totalAmount    Int? // 총 판매 금액
  paidAmount     Int         @default(0) // 총 결제 금액
  refundedAmount Int         @default(0) // 총 환불 금액
  balanceAmount  Int         @default(0) // 총 잔액 (총 결제 금액 - 총 환불 금액)
  orderedAt      DateTime    @default(now())
}

model OrderItem {
  id        String  @id @default(uuid())
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product @relation(fields: [productId], references: [id], onDelete: Restrict)
  productId Int
  quantity  Int
  amount    Int
}

enum OrderStatus {
  pending
  paid
  onShipping
  completed
  refunded
}

model FavoriteProduct {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}
